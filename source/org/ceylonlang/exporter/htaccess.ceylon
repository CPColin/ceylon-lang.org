String htaccess {
    value stringBuilder = StringBuilder();
    
    void append(String string) {
        stringBuilder.append(string);
        stringBuilder.appendCharacter('\n');
    }
    
    function permanentRedirectRule(String pattern, String destination) {
        import org.ceylonlang.server {
            prefixRedirects,
            redirectPermanentlyWithGetMethod
        }
        
        return "RewriteRule ^``pattern``$ ``destination`` [R=``redirectPermanentlyWithGetMethod``,L]";
    }
    
    void header() {
        append("# This file was automatically generated by the org.ceylonlang.exporter module.
                
                Options +FollowSymlinks
                RewriteEngine on
                
                IndexIgnore *
                DirectoryIndex index.html
                ErrorDocument 404 /404.html
                
                RewriteCond %{HTTP_HOST} ^ceylon-lang.org$ [OR]
                RewriteCond %{HTTP_HOST} ^ceylon.beanvalidation.org$ [OR]
                RewriteCond %{HTTP_HOST} ^www.ceylon-lang.org$ [OR]
                RewriteCond %{HTTP_HOST} ^staging.ceylon-lang.org$");
    }
    
    void rewriteDocumentationCurrent() {
        import org.ceylonlang.site.util {
            currentDocumentationVersion
        }
        
        append("
                # Rewrite /documentation/current to /documentation/``currentDocumentationVersion``
                RewriteRule ^documentation/current(.*)$ /documentation/``currentDocumentationVersion``$1 [L]");
    }
    
    void miscellaneousRedirects() {
        import org.ceylonlang.server {
            exactMatchRedirects,
            prefixRedirects
        }
        
        append("
                # Redirect some miscellaneous URL's (see Ceylon source for commentary)");
        
        for (pattern->destination in exactMatchRedirects) {
            append(permanentRedirectRule(pattern, destination));
        }
        
        for (pattern->destination in prefixRedirects) {
            append(permanentRedirectRule("``pattern``(.*)", "``destination``$1"));
        }
    }
    
    void downloadRedirects() {
        import org.ceylonlang.site.util {
            ReleaseFile,
            releases
        }
        
        append("");
        append("# Redirect download links to our download site");
        
        function rule(ReleaseFile file) {
            return permanentRedirectRule("download/dist/``file.linkName``",
                "https://downloads.ceylon-lang.org/cli/``file.fileName``");
        }
        
        for (release in releases) {
            append("
                    ``rule(release.zipFile)``
                    ``rule(release.debFile)``
                    ``rule(release.rpmFile)``");
        }
    }
    
    header();
    rewriteDocumentationCurrent();
    miscellaneousRedirects();
    downloadRedirects();
    
    return stringBuilder.string;
}
